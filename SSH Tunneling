SSH tunneling (or SSH port forwarding) is a method of securely routing network traffic through an encrypted SSH connection. It allows you to forward traffic
from your local machine to a remote machine (or vice versa), making it seem as if the traffic originated from the SSH server itself.

It’s often used for:
Securely accessing services behind firewalls.
Encrypting traffic between client and server.

Bypassing network restrictions.
Real-World Example: Secure Access to a Remote Database Behind a Firewall
Scenario:
You have a database (e.g., MySQL) running on a server at 192.168.1.100:3306. This server is behind a firewall and cannot be accessed directly from your local
machine. However, you can SSH into a bastion (jump) server at bastion.example.com.

Goal:
Access the database on your local machine using an SSH tunnel.

Step-by-Step:
1. Set Up the SSH Tunnel
Run the following command on your local machine:

ssh -L 3307:192.168.1.100:3306 user@bastion.example.com

-L specifies local port forwarding.
3307 is the local port on your machine.
192.168.1.100:3306 is the remote address of the MySQL server.
user@bastion.example.com is your SSH login to the bastion server.

2. Explanation of the Command
Your Local Machine: Opens port 3307 for listening.
Bastion Server: Routes traffic from 3307 on your local machine to 192.168.1.100:3306.
Remote Database: Receives the traffic as if it’s coming from the bastion server, bypassing the firewall.

3. Connect to the Database Locally
Once the tunnel is established, connect to the database as if it’s running on your local machine:

mysql -h 127.0.0.1 -P 3307 -u db_user -p

127.0.0.1 refers to your local machine.
-P 3307 specifies the port you forwarded.

4. Verify the Connection
If everything is set up correctly, you should now be able to query the remote database securely as if it’s on your local machine.

Real-World Uses
Bypass Firewalls: Access internal resources (databases, websites, or APIs) without exposing them to the internet.
Secure Communication: Encrypt traffic between your client and the server.
Remote Development: Work on services running on a remote machine without directly exposing them.



Here are more real-world examples and variations of SSH tunneling to cover different use cases. Each example builds on a practical scenario you might encounter.

Example 1: Bypassing a Blocked Website
Scenario:
You’re on a public Wi-Fi network where certain websites (e.g., example.com) are blocked. However, you have SSH access to a remote server (e.g., server.example.com) 
that has unrestricted internet access.

Goal:
Access the blocked website using SSH tunneling.

ssh -L 8080:example.com:80 user@server.example.com

What it does:
Sets up a tunnel from your local machine (port 8080) to the remote server.
The remote server forwards traffic to example.com on port 80 (HTTP).
Open a browser and go to http://127.0.0.1:8080. You’ll see the website as if you’re browsing directly from the remote server.

Example 2: Secure Remote Desktop Access
Scenario:
You need to remotely access a Windows desktop (RDP) on a server (192.168.1.50:3389) behind a firewall. You can only SSH into a bastion server (bastion.example.com).

Goal:
Connect to the remote desktop through an SSH tunnel.

ssh -L 33890:192.168.1.50:3389 user@bastion.example.com

What it does:
Forwards local port 33890 to the RDP port (3389) on the remote server.
All RDP traffic is routed through the SSH tunnel.

Open your Remote Desktop Client.
Connect to 127.0.0.1:33890.
Now you’re securely connected to the remote desktop via SSH.

Example 3: Reverse SSH Tunnel (Access Your Local Machine Remotely)
Scenario:
You’re working on a local machine (e.g., local.example.com) behind a firewall. You want to SSH into it later, but it’s not directly accessible due to NAT or
firewall rules. However, you can SSH into a public server (e.g., server.example.com).

Goal:
Access your local machine from anywhere.

ssh -R 2222:localhost:22 user@server.example.com

What it does:
Creates a reverse SSH tunnel on the remote server.
Maps port 2222 on server.example.com to port 22 (SSH) on your local machine.

How to Use:
SSH into the public server from any remote machine:

ssh -p 2222 user@server.example.com
This connects you back to your local machine!

Example 4: Accessing a Private Web Application
Scenario:
A web application is running on a private server at 192.168.1.200:8000. The server is only accessible within the internal network, but you can SSH into a bastion server.

Goal:
Access the web application securely from your browser.

ssh -L 9000:192.168.1.200:8000 user@bastion.example.com

What it does:
Forwards local port 9000 to port 8000 on the private server.
Traffic flows through the SSH tunnel.

How to Use:
Open your browser.
Go to http://127.0.0.1:9000.
You can now access the private web application as if it’s running locally.

Example 5: SOCKS Proxy for Flexible Tunneling
Scenario:
You want to route all your web traffic through a remote SSH server (e.g., server.example.com) to bypass restrictions or for added privacy.

Goal:
Use the remote server as a proxy for all internet traffic.

ssh -D 1080 user@server.example.com

What it does:
Creates a dynamic SOCKS proxy on port 1080 of your local machine.
Routes all traffic through the SSH server.

How to Use:
Configure your browser or system to use 127.0.0.1:1080 as a SOCKS proxy.
All traffic is now routed securely through the SSH server.

Example 6: Multiple Hops (Chained SSH Tunnels)
Scenario:
The resource you need (e.g., 192.168.2.100:22) is behind multiple servers:

Server A: bastion1.example.com
Server B: bastion2.example.com.
Goal:
SSH directly into the final server (192.168.2.100) through multiple hops.

ssh -J user@bastion1.example.com,user@bastion2.example.com user@192.168.2.100

What it does:
Uses the -J (jump host) option to chain SSH connections.
Establishes a tunnel through both bastion servers to reach the final destination.


Local (-L): Forward traffic from your local machine to a remote destination.
Remote (-R): Forward traffic from a remote server back to your local machine.
Dynamic (-D): Create a SOCKS proxy for flexible traffic routing.

Common Use Cases:
Bypassing firewalls or NAT restrictions.
Securing otherwise unencrypted traffic.
Simplifying remote development or debugging.
Practical Commands:

Test connectivity: telnet localhost <port> or curl http://127.0.0.1:<port>.
Debug SSH tunnels: Use ssh -v for verbose output.
