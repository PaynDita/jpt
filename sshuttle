sshuttle is a tool that provides a quick and efficient way to set up a VPN-like connection using SSH. It routes network traffic from a client machine through an SSH server, allowing you to access resources
behind the server's network as though you were locally connected.

No Admin Privileges Needed: You don’t need superuser access on the remote server.

Cross-Platform: Works on Linux, macOS, and Windows (via WSL).

Common Use Cases
Accessing internal resources on a remote network (e.g., intranet websites, databases, or internal services).
Bypassing firewalls or restrictions on the client network.
Forwarding traffic securely over an encrypted SSH tunnel.

Installation
On Debian/Ubuntu:
sudo apt update
sudo apt install sshuttle

On macOS (via Homebrew):
brew install sshuttle

On Windows:
Use the Windows Subsystem for Linux (WSL) or a Linux virtual machine, as sshuttle is a Linux-based tool.

Usage
Basic command syntax:

sshuttle -r [user]@[ssh-server] [subnet/traffic-range]

Example: Routing all traffic through the remote server:
sshuttle -r user@remote-server 0/0

Example: Routing only a specific subnet (e.g., 192.168.1.0/24):
sshuttle -r user@remote-server 192.168.1.0/24

-x: Exclude certain IPs or subnets from being routed.
-D: Run sshuttle as a background process (daemon mode).
--dns: Forward DNS queries through the tunnel.

Limitations
Only works on networks reachable from the SSH server.
Performance depends on the SSH server and the network connection.
Requires Python on both client and server sides.

Here’s a real-world example of setting up sshuttle to access a private network resource (e.g., an internal database or intranet) through an SSH server. This example assumes you have basic SSH access to a remote server.

You are on your home network, and you need access to a private network (e.g., 192.168.1.0/24) behind a remote SSH server (e.g., ssh.example.com).
The SSH server is in the same private network as the internal resource you want to access.
Step-by-Step Guide

1. Ensure Prerequisites
sshuttle installed on your local machine. Install it if not already available:

sudo apt update && sudo apt install sshuttle

2. Basic Command
Run the following command from your local machine:

sshuttle -r user@ssh.example.com 192.168.1.0/24
-r user@ssh.example.com: Specifies the SSH server and user.
192.168.1.0/24: Specifies the subnet you want to route through the tunnel.

3. Test Connectivity
After running the command, traffic destined for the private subnet (192.168.1.0/24) will be routed through the SSH server.

To test, try pinging an internal IP (e.g., 192.168.1.100):

ping 192.168.1.100
Or access an internal web application in your browser by entering its private IP.

Example with Full Internet Traffic
If you want to route all your traffic through the SSH server (like a full VPN):

sshuttle -r user@ssh.example.com 0/0
Here, 0/0 matches all IP ranges, meaning all your traffic is routed through the server.

4. Daemon Mode (Optional)
To run sshuttle in the background, add the -D flag:

sshuttle -r user@ssh.example.com 192.168.1.0/24 -D

You can later terminate it by finding and killing the process:
pkill sshuttle

Scenario Example

You want to access a database at 192.168.1.10 behind ssh.example.com.
Use the following command:

sshuttle -r user@ssh.example.com 192.168.1.0/24
Test access:
mysql -h 192.168.1.10 -u db_user -p

Additional Notes
If DNS queries must go through the tunnel (e.g., for internal domains):
sshuttle --dns -r user@ssh.example.com 192.168.1.0/24

If you face connectivity issues:
Ensure SSH access works:
ssh user@ssh.example.com

Check that the SSH server allows forwarding traffic.







You said:
setting this up for a specific use case pivoting
ChatGPT said:
ChatGPT
Setting up sshuttle for Pivoting in a Penetration Testing Scenario
Scenario
You're conducting a penetration test and have gained SSH access to a compromised server (pivot.example.com) inside a target network. Your goal is to pivot through this server to access a private subnet (e.g., 192.168.10.0/24) that is not directly reachable from your machine.


Access to the pivot server:

SSH credentials for the compromised server (pivot.example.com).
Target network details:
The private subnet to access (e.g., 192.168.10.0/24).
sshuttle installed on your attacker machine.

2. Verify SSH Access to Pivot Server
Before using sshuttle, ensure you can SSH into the pivot server:
ssh user@pivot.example.com

3. Use sshuttle to Pivot
Run sshuttle on your attacker machine to route traffic through the pivot server to the target subnet:

sshuttle -r user@pivot.example.com 192.168.10.0/24
-r user@pivot.example.com: SSH credentials for the pivot server.
192.168.10.0/24: The private subnet you want to access.

4. Test Connectivity
After running the command, all traffic destined for 192.168.10.0/24 will be routed through the pivot server. Test it by:

Ping an internal IP:
ping 192.168.10.5
Access a private web application: Open a browser and navigate to an internal resource like http://192.168.10.5.

Advanced Usage for Complex Scenarios
1. Include DNS Forwarding
If the target network uses private DNS names (e.g., internal.target.com), add the --dns flag:

sshuttle --dns -r user@pivot.example.com 192.168.10.0/24

2. Route All Traffic (Full VPN)
If you need to route all traffic through the pivot server, use 0/0:

sshuttle -r user@pivot.example.com 0/0

3. Exclude Certain IPs
If you want to exclude specific IPs or ranges (e.g., to avoid routing internet-bound traffic), use the -x option:

sshuttle -r user@pivot.example.com 192.168.10.0/24 -x 8.8.8.8

4. Chain SSHuttle for Double Pivoting
If you need to pivot through multiple compromised hosts:

First Pivot: Use SSH to forward local traffic through the first server.
ssh -L 12345:second-pivot:22 user@first-pivot

Second Pivot with SSHuttle: Use the local port as your entry point.
sshuttle -r user@127.0.0.1:12345 192.168.20.0/24

Real-World Example
Attacker machine: Your local machine (e.g., 10.0.0.5).
Pivot server: pivot.example.com (e.g., 10.0.0.10).
Target network: 192.168.10.0/24 (private subnet you want to explore).
Command to pivot:

sshuttle -r user@10.0.0.10 192.168.10.0/24
Now, you can interact with machines in 192.168.10.0/24 as though you were inside the network.

Common Issues & Troubleshooting
SSH Access Fails:

Verify credentials and SSH service on the pivot server.
Check if firewalls block your SSH connection.
No Traffic Routing:

Ensure iptables on the pivot server allows forwarding.
Verify the pivot server has access to the target subnet.
Connectivity Slow/Unstable:

Use -v for verbose output to debug
sshuttle -v -r user@pivot.example.com 192.168.10.0/24


Ensure iptables on the pivot server allows forwarding

1. Enable IP Forwarding
Ensure that the pivot server is configured to forward packets between interfaces.

Temporary (For the Current Session)
Run the following command on the pivot server:

echo 1 > /proc/sys/net/ipv4/ip_forward

Permanent (Survives Reboots)
Edit the sysctl.conf file:

sudo nano /etc/sysctl.conf
Uncomment or add the following line:
net.ipv4.ip_forward = 1

Apply the changes:
sudo sysctl -p

2. Allow Forwarding in iptables
Configure iptables to allow traffic forwarding between the interfaces.

Allow Forwarding of All Traffic
Run the following commands:

sudo iptables -A FORWARD -i eth0 -o eth0 -j ACCEPT
sudo iptables -A FORWARD -j ACCEPT
-A FORWARD: Appends rules to the FORWARD chain.
-i eth0 and -o eth0: Specifies the input and output interfaces. Replace eth0 with the actual interface name if necessary.

Set NAT for Outgoing Traffic
If the forwarded traffic needs NAT (Network Address Translation), set up a rule in the POSTROUTING chain:

sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
-t nat: Specifies the NAT table.
POSTROUTING: Applies NAT rules to outgoing traffic.
-o eth0: Outgoing interface to the internet (replace eth0 if necessary).
MASQUERADE: Dynamically applies NAT for traffic leaving the pivot server.

3. Save the Rules
To ensure the rules persist after a reboot, save the iptables configuration.

On Debian/Ubuntu:
sudo apt install iptables-persistent
sudo service netfilter-persistent save

On CentOS/RHEL:
sudo service iptables save

Verify the Rules:
List all current rules:

sudo iptables -L -v -n
sudo iptables -t nat -L -v -n

4. Verify Forwarding
After setting up, check that the pivot server is forwarding traffic:

From your attacker machine, run a test (e.g., ping a machine in the target network):

ping 192.168.10.5

Use tcpdump on the pivot server to confirm traffic is being forwarded:
sudo tcpdump -i eth0 host 192.168.10.5




Custom Script: iptables_forwarding.sh
Save this script as iptables_forwarding.sh and execute it on the pivot server:

bash
Copy code
#!/bin/bash

# Ensure the script is run with root privileges
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root."
   exit 1
fi

# Variables (replace these with your actual interface names and target subnet)
INTERNAL_IF="eth0"   # Internal network interface
EXTERNAL_IF="eth1"   # External network interface (if NAT is needed)
TARGET_SUBNET="192.168.10.0/24"  # Target private subnet to allow traffic to/from

# Enable IP forwarding
echo "Enabling IP forwarding..."
echo 1 > /proc/sys/net/ipv4/ip_forward

# Make IP forwarding persistent across reboots
if ! grep -q "net.ipv4.ip_forward = 1" /etc/sysctl.conf; then
    echo "Making IP forwarding persistent..."
    echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
    sysctl -p
fi

# Flush existing iptables rules
echo "Flushing existing iptables rules..."
iptables -F
iptables -t nat -F
iptables -X

# Set default policies
echo "Setting default policies..."
iptables -P INPUT ACCEPT
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Allow traffic forwarding between interfaces
echo "Setting up FORWARD rules..."
iptables -A FORWARD -i $INTERNAL_IF -o $EXTERNAL_IF -j ACCEPT
iptables -A FORWARD -i $EXTERNAL_IF -o $INTERNAL_IF -j ACCEPT

# Allow forwarding traffic to the target subnet
iptables -A FORWARD -d $TARGET_SUBNET -j ACCEPT
iptables -A FORWARD -s $TARGET_SUBNET -j ACCEPT

# Enable NAT for outgoing traffic (if external interface is needed)
echo "Setting up NAT for outgoing traffic..."
iptables -t nat -A POSTROUTING -o $EXTERNAL_IF -j MASQUERADE

# Save the iptables rules to make them persistent
echo "Saving iptables rules..."
if command -v netfilter-persistent &> /dev/null; then
    netfilter-persistent save
else
    apt-get update && apt-get install -y iptables-persistent
    netfilter-persistent save
fi

echo "Configuration completed. Traffic forwarding is now enabled!"
How to Use
Save the Script: Save the script to a file on your pivot server, e.g., /root/iptables_forwarding.sh.

Make It Executable:

chmod +x /root/iptables_forwarding.sh

Run the Script: Execute the script as root:

sudo /root/iptables_forwarding.sh

Verify the Configuration:

List the iptables rules:

sudo iptables -L -v -n
sudo iptables -t nat -L -v -n
